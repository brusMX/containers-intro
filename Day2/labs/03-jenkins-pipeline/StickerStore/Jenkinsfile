podTemplate(label: 'mypod', containers: [
    containerTemplate(name: 'docker', image: 'docker', ttyEnabled: true, command: 'cat'),
    containerTemplate(name: 'node', image: 'node', ttyEnabled: true, command: 'cat')
  ],
  volumes: [
    hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
  ]) {
    node('mypod') {
        def gitRepo = 'https://github.com/torosent/stickerstore/'
        def dockerRepo = 'torosent'
        def dockerHubCredId = 'dockerhub'
        def dockerImageName = 'stickerstore'
        def containerService = 'k8s-cicd | Kubernetes'
        def azureCredentialsId = 'azure'
        def resourceGroupName = 'tomer-cicd-RG'
        def sshCredentialsId = 'sshkey'
        def appVersion

    currentBuild.result = "SUCCESS"

    try {
        stage('Checkout'){
            container('node') {
            git url: gitRepo, branch: 'master'
            appVersion = sh (
                script: 'node -p -e "require(\'./package.json\').version"', 
                returnStdout: true
            ).trim()   
            }  
        }
        stage('Build Docker image') {
            container('docker') {
                sh  """
                    docker build -t ${dockerRepo}/${dockerImageName}:${appVersion} .
                    docker tag ${dockerRepo}/${dockerImageName}:${appVersion} ${dockerRepo}/${dockerImageName}:latest
                    """
            }
        }
        stage('Push Docker image') {
            container('docker') {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', 
                        credentialsId: dockerHubCredId,
                        usernameVariable: 'DOCKER_HUB_USER', 
                        passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
                            sh """
                            docker login -u ${env.DOCKER_HUB_USER} -p ${env.DOCKER_HUB_PASSWORD}
                            docker push ${dockerRepo}/${dockerImageName}:latest
                            docker push ${dockerRepo}/${dockerImageName}:${appVersion}
                            """
                        }
            }
        }
        stage('Deploy tp K8S') {
            acsDeploy azureCredentialsId: azureCredentialsId, configFilePaths: 'service.yaml,deploy.yaml', containerService: containerService, dcosDockerCredentialsPath: '', enableConfigSubstitution: true, resourceGroupName: resourceGroupName, secretName: '', sshCredentialsId: sshCredentialsId
        }
    }
    catch (err) {
        currentBuild.result = "FAILURE"
        throw err
    }
}
  }
